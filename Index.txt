1.Vignesh:
Array.prototype.slice():
	=> The slice method returns a shallow of a portion of an array into a new array selected from start to end(end not included) Where start and end represents an index
	   of items in that array.
	=> The original array will not be modified.
	refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice

Array.prototype.reduce():
	=>The reduce method executes a user-supplied "reducer" callback function on each element of the array,inorder, passing in the return value from the calculation
	  on the preceding element. the final result will be a single value.
	refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce

Array.prototype.reduceRight():
	=>The same reduce function will execute from the right side.
	refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight

Array.prototype.reverse():
	=> the reverse() method reverses an array in place and reverse the reference to the array to the same array.
	=> the reverse() method overwrites the original array.
	refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse

Array.prototype.shift():
	=> the shift method removes the first element from an array and returns that removed element. this method changes the length of the array.
	refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift

Array.prototype.some():
	=> The some() method tests wheather at least one element in the array passes function.It returns true if, in the the array, it finds an element
	   for which the provoded function it returns false. it doesn't modify the array.
	refer: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some


2.Sanjay:
1)Array.prototype.slice()

    			The slice returns selected element of an array into a new array object. Slice selected form start to end (sometimes end value not included) 
    Starting and ending represent the index of items in that array. The original array will not changed. It is zerp based index at start and end
    extraction.

Example:
========

    const forest = ['lion', 'tiger', 'camel', 'elephant', 'giraffe'];

    console.log(forest.slice(2));
    // Output : Array ['camel', 'elephant', 'giraffe']

    console.log(forest.slice());    
    // Output : Array ['lion', 'tiger', 'camel', 'elephant', 'giraffe']


Syntax:
=======

    slice()
    slice(start)
    slice(start,end)
		

2)Array.prototype.shift()

		The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.

		Example
		=======

				const container = ['first', 'second', 'third'];
				const firstElement = container.shift();
				console.log(container);
				// Output : Array['second,'third']
				consle.log(firstElement);
				// Output : 'first'


		Calling shift() on non-array object
			The shift() method reads the length of this. If the normalized length is 0, length is set to 0 again. Otherwise,the property at 0 is returned, 
			and the rest of the properties are shifted left by one. The length property is decremented by one.


		Calling shift() on non-array objects:
		=====================================

			const arrayLike = {
  			length: 3,
  			unrelated: "foo",
  			2: 4,
			};
			console.log(Array.prototype.shift.call(arrayLike));
			// undefined, because it is an empty slot
			console.log(arrayLike);
			// { '1': 4, length: 2, unrelated: 'foo' }


3)Array.prototype.reverse()

			The reverse() method reverse an array element and returns the reference to the same array, the first array element becoming the first. In Other
			words, elements order in the array will be turned towards the direction opposite to that previously stated.

			Syntax:
			=======
			reverse()

			Example:
			========
					const items = [1, 2, 3];
					console.log(items); // [1, 2, 3]

					items.reverse();
					console.log(items); // [3, 2, 1]


			Calling reverse() on non-array objects:
			======================================
					const arrayLike = {
  					length: 3,
  					unrelated: "foo",
  					2: 4,
					};
					console.log(Array.prototype.reverse.call(arrayLike));
					// { '0': 4, length: 3, unrelated: 'foo' }
					// The '2' index is deleted because the '0' index was not present originally


4)Array.prototype.reduce()

			The reduce() method execute a user supplied reduce callback function on each element of the array,  in order, passing in the return value from 
			the calculation on the preceding element.

			The first time that the callback is run there is no "return value of the previous calculation". If supplied, an initial value may be used in its 
			place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element


			Example:
			=======

				const value = [15, 16, 17, 18, 19]
				console.log(value.reduce(
				(accumulator, currentValue) => accumulator + currentValue,10,)
				// Output : 95
				);



5)Array.prototype.reduceRight()

			The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.

			Example
			=======

			const array1 = [[0, 1], [2, 3], [4, 5]];

			const result = array1.reduceRight((accumulator, currentValue) => accumulator.concat(currentValue));

			console.log(result);
			// Expected output: Array [4, 5, 2, 3, 0, 1]



6)Array.prototype.some()


			The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the 
			array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.

			Example:
			========

				const array = [1, 2, 3, 4, 5];

				// Checks whether an element is even
				const even = (element) => element % 2 === 0;

				console.log(array.some(even));
				// Expected output: true


3.Vengatesh:
1) Array.prototype.some()

			The return type of Array.prototype.some() is 'true' or 'false'. It checks whether atleast one element in array satisfies the function implementation,
	If any one of the element is array satisfies the condition it returns 'true' and stops the execution, if non of the element satisfies the function implementation it returns 'false'.

Ex:
	const array = [1, 2, 3];

	// Checks whether an element is even
	const even = (element) => element % 2 === 0;

	console.log(array.some(even));
	// Expected output: true	

Here 2 is even so it returns 'true'.


2) Array.prototype.slice()

			The slice() method return the shallow copy of the array to new array, it doesnot modifies the original array it takes two parameters the start index and the end index, the end index is exclusive. 
	If no parameter is given it copies the whole array and return to new array. The negative index represents the array from reverse 
	ie. The -1 index represents the last array.

Ex:
	const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];

	console.log(animals.slice(2));
	// Expected output: Array ["camel", "duck", "elephant"]

	console.log(animals.slice(2, 4));
	// Expected output: Array ["camel", "duck"]

	console.log(animals.slice(-2));
	// Expected output: Array ["duck", "elephant"]

	console.log(animals.slice());
	// Expected output: Array ["ant", "bison", "camel", "duck", "elephant"]

3) Array.prototype.shift()

		shift() is the array method. It is similar to pop() but the difference is pop() removes the last element from the array the shift is used to remove the first element from the array.

Ex:
	const array1 = [1, 2, 3];

	const firstElement = array1.shift();

	console.log(array1);
	// Expected output: Array [2, 3]

	console.log(firstElement);
	// Expected output: 1

4) Array.prototype.reverse()

		The reverse() method is used to reverse the array, which means the fist element of array becomes the last element and the last becomes the first element. The reverse() method is destructive, 
	it modifies the original array it doesnot creates new array.

Ex:
	const array1 = ['one', 'two', 'three'];
	console.log('array1:', array1);
	// Expected output: "array1:" Array ["one", "two", "three"]

	const reversed = array1.reverse();
	console.log('reversed:', reversed);
	// Expected output: "reversed:" Array ["three", "two", "one"]

	console.log('array1:', array1);
	// Expected output: "array1:" Array ["three", "two", "one"]

5) Array.prototype.reduce()

	Array.prototype.reduce() is a built-in method in JavaScript that is used to reduce the elements of an array to a single value. It takes a callback function as the first argument and an optional initial value as the second argument.
	The callback function takes two required arguments: the accumulator and the current value. It can also take two optional arguments: the current index and the original array.

Ex:
	const array1 = [1, 2, 3, 4];

	// 0 + 1 + 2 + 3 + 4
	const initialValue = 0;
	const sumWithInitial = array1.reduce(
  		(accumulator, currentValue) => accumulator + currentValue,
  		initialValue
	);

	console.log(sumWithInitial);
	// Expected output: 10

Here reduce is used to get the sum of all elements in array. The accumulator is the variable that holds the sum of the elements, and currentValue is the current element being processed. The initial value of the accumulator is set to 0.


6) Array.prototype.reduceRight()

	The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value. The main difference between reduce and reduceRight is In reduce the flow of execution is from left to right, 
	In reduceRight the flow is from right to left. As like reduce, reduceRight takes two arguments, a callback function that is called for each element of the array, an optional initial value for the accumulator.

Ex: 
	const array1 = [[0, 1], [2, 3], [4, 5]];

	const result = array1.reduceRight((accumulator, currentValue) => accumulator.concat(currentValue));
	
	console.log(result);
	// Expected output: Array [4, 5, 2, 3, 0, 1]